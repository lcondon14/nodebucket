{"ast":null,"code":"import { Router } from '@angular/router';\nimport { inject } from '@angular/core/';\nimport { CookieService } from 'ngx-cookie-service';\nexport const authGuard = (route, state) => {\n  const cookie = inject(CookieService);\n  if (cookie.get('session._user')) {\n    console.log(\"You are logged in and have a valid session cookie set!\");\n    return true;\n  } else {\n    console.log('user is not logged in and cannot access the task page!');\n    const router = inject(Router);\n    router.navigate(['/security/signing'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n};","map":{"version":3,"names":["Router","inject","CookieService","authGuard","route","state","cookie","get","console","log","router","navigate","queryParams","returnUrl","url"],"sources":["/Users/laurelcondon/Desktop/buwebdev/nodebucket/src/app/shared/auth.guard.ts"],"sourcesContent":["import { CanActivateFn, Router } from '@angular/router';\nimport { inject } from '@angular/core/';\nimport { CookieService } from 'ngx-cookie-service';\n\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  const cookie = inject(CookieService);\n\n\n  if (cookie.get('session._user')) {\n  console.log(\"You are logged in and have a valid session cookie set!\");\n  return true \n} else {\n  console.log('user is not logged in and cannot access the task page!');\n\n  const router = inject(Router);\n  router.navigate(['/security/signing'], { queryParams: { returnUrl: state.url }})\n  return false\n}\n};\n"],"mappings":"AAAA,SAAwBA,MAAM,QAAQ,iBAAiB;AACvD,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,aAAa,QAAQ,oBAAoB;AAGlD,OAAO,MAAMC,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,MAAM,GAAGL,MAAM,CAACC,aAAa,CAAC;EAGpC,IAAII,MAAM,CAACC,GAAG,CAAC,eAAe,CAAC,EAAE;IACjCC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACrE,OAAO,IAAI;GACZ,MAAM;IACLD,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IAErE,MAAMC,MAAM,GAAGT,MAAM,CAACD,MAAM,CAAC;IAC7BU,MAAM,CAACC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAER,KAAK,CAACS;MAAG;IAAE,CAAC,CAAC;IAChF,OAAO,KAAK;;AAEd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}